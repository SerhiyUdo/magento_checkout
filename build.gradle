plugins {
    id 'java'
    id 'io.qameta.allure' version '2.8.1'
}

group 'com.demo'
version '1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.testng', name: 'testng', version: '7.9.0'
    implementation group: 'com.epam.jdi', name: 'jdi-light', version: '1.5.2'
    implementation group: 'com.epam.jdi', name: 'jdi-light-html', version: '1.5.2'
    implementation group: 'com.epam.jdi', name: 'jdi-commons', version: '1.1.34'
    implementation group: 'com.epam.jdi', name: 'jdi-dark', version: '1.1.13'
    implementation group: 'io.qameta.allure', name: 'allure-testng', version: '2.13.8'
    //implementation group: 'io.qameta.allure', name: 'allure-gradle', version: '2.8.1'

    implementation 'com.opencsv:opencsv:5.9'
    implementation('io.qameta.allure:allure-model') {
        version {
            strictly '2.13.8'
        }
    }
    implementation('io.qameta.allure:allure-java-commons') {
        version {
            strictly '2.13.8'
        }
    }
}

test {
    launchProperties()
    systemProperties = System.properties
    saveProperties()
    useTestNG() {
        options {
            switch(System.getProperty("product_type").toLowerCase()) {
                case "freemium":
                    println("start frimium here: ---------->")
                    suites(file("src/test/resources/suites/freemium.xml"))
                    break
                case ["regression"]:
                default:
                    println("start regression or def here: ---------->")
                    suites(file("src/test/resources/suites/ui.xml"))
                    break
            }
        }
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
}

private static void saveProperties() {
    Properties testProperties = new Properties()
    File testPropertiesFile = new File("src/main/resources/test.properties")
    testProperties.load(testPropertiesFile.newDataInputStream())
    if (System.getProperty("serverUrl") != null) {
        testProperties.setProperty("domain", System.getProperty("serverUrl"))
        testProperties.store(testPropertiesFile.newWriter(), null)
    }
}

private static void launchProperties() {
    Properties launchProperties = new Properties()
    File lunchPropertiesFile = new File("src/main/resources/launch.properties")
    launchProperties.load(lunchPropertiesFile.newDataInputStream())
    launchProperties.stringPropertyNames().forEach({ key ->
        if (System.getProperty(key) == null) {
            println(key + "=" + launchProperties.getProperty(key))
            System.setProperty(key, launchProperties.getProperty(key))
        }
    })
}

allure {
    version = '2.13.8'
}

clean {
    delete "target"
    delete "build"
    delete "out"
    delete "allure-results"
    delete "src/test/resources/downloads"
}

configurations.all {
    exclude module: 'log4j-slf4j-impl'
}